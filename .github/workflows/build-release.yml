name: Build and Release

on:
  push:
    branches:
      - release

jobs:
  build:
    name: Build binaries on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout the repository so we can access the source code
      - uses: actions/checkout@v3

      # Install Node.js and the Neutralino CLI used to build the application
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Neutralino CLI
        run: npm install -g @neutralinojs/neu

      # Build the project. This generates a single zip file containing
      # binaries for every platform.
      - name: Build project
        run: neu build --release

      # Extract and rename the binaries so they have clear platform names
      - name: Prepare artifacts
        shell: bash
        run: |
          unzip -o Artext-release.zip -d dist
          mkdir -p out
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            mv dist/Artext-mac_arm64 "out/artext-darwin-aarch64.app"
            mv dist/Artext-mac_x64 "out/artext-darwin-x86_64.app"
            mv dist/Artext-mac_universal "out/artext-darwin-universal.app"
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            mv dist/Artext-linux_x64 out/artext-linux-x86_64
            mv dist/Artext-linux_arm64 out/artext-linux-aarch64
            mv dist/Artext-linux_armhf out/artext-linux-armhf
            # Placeholders for packaging as .deb and .AppImage
            cp out/artext-linux-x86_64 out/artext-linux-x86_64.deb
            cp out/artext-linux-x86_64 out/artext-linux-x86_64.AppImage
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            mv dist/Artext-win_x64.exe out/artext-windows-x86_64.exe
          fi

      # Upload the platform specific artifacts so the release job can collect
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}
          path: out/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download all artifacts generated by the build matrix
      - uses: actions/download-artifact@v3
        with:
          path: release

      # Create a GitHub release with the binaries attached
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: release/**/*
          tag_name: build-${{ github.run_number }}
